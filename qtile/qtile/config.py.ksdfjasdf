#!/usr/bin/env python
# -*- coding: utf-8 -*-

from libqtile import bar, hook, layout, widget
from libqtile.command import lazy
from libqtile.manager import Drag, Click, Group, Key, Screen

class Commands(object):
    dmenu = 'dmenu_run -i -b -p ">" -fn "Droid Sans-10" -nb "#000" -nf "#fff" -sb "#15181a" -sf "#fff"'
    volume_up = 'amixer -q -c 0 sset Master 5dB+'
    volume_down = 'amixer -q -c 0 sset Master 5dB-'
    volume_toggle = 'amixer -q -c 0 sset Master toggle'


##-> Theme + widget options
class Theme(object):
    bar = {
        'size': 24,
        'background': '15181a',
        }
    widget = {
        'font': 'Droid Sans',
        'fontsize': 11,
        'background': bar['background'],
        'foreground': 'eeeeee',
        }
    graph = {
        'background': '000000',
        'border_width': 0,
        'border_color': '000000',
        'line_width': 1,
        'margin_x': 0,
        'margin_y': 0,
        'width': 50,
        }

    groupbox = widget.copy()
    groupbox.update({
        'padding': 2,
        'borderwidth': 3,
        })

    sep = {
        'background': bar['background'],
        'foreground': '444444',
        'height_percent': 75,
        }

    systray = widget.copy()
    systray.update({
        'icon_size': 16,
        'padding': 3,
        })

##-> Keybindings
MOD = 'mod4'
keys = [
    Key(
        ["mod1"], "k",
        lazy.layout.down()
    ),
    Key(
        ["mod1"], "j",
        lazy.layout.up()
    ),
    Key(
        ["mod1", "control"], "k",
        lazy.layout.shuffle_down()
    ),
    Key(
        ["mod1", "control"], "j",
        lazy.layout.shuffle_up()
    ),
    Key(
        ["mod1"], "space",
        lazy.layout.next()
    ),
    Key(
        ["mod1", "shift"], "space",
        lazy.layout.rotate()
    ),
    Key(
        ["mod1", "shift"], "Return",
        lazy.layout.toggle_split()
    ),
    Key(["mod1"], "h",      lazy.to_screen(1)),
    Key(["mod1"], "l",      lazy.to_screen(0)),
    Key(["mod1"], "Return", lazy.spawn("xterm")),
    Key(["mod1"], "Tab",    lazy.nextlayout()),
    Key(["mod1"], "w",      lazy.window.kill()),

    Key(["mod1", "control"], "r", lazy.restart()),

    Key([MOD], "f",      lazy.window.toggle_fullscreen()),
]

group_setup = (
    ('1', {}),
    ('2', {}),
    ('3', {}),
    ('4', {}),
    ('5', {}),
)

groups = []
for idx, (name, config) in enumerate(group_setup):
    hotkey = str(idx + 1)
    groups.append(Group(name, layout=config.get('layout', 'tile')))
    keys.append(Key([MOD], hotkey, lazy.group[name].toscreen()))
    keys.append(Key([MOD, 'shift'], hotkey, lazy.window.togroup(name)))


#-> Mouse
mouse = (
   Drag(["mod1"], 'Button1', lazy.window.set_position_floating(), start=lazy.window.get_position()),
   Drag(["mod1"], 'Button3', lazy.window.set_size_floating(), start=lazy.window.get_size()),
   Click(["mod1"], 'Button2', lazy.window.bring_to_front())
)


##-> Screens
screens = [
    Screen(
        top=bar.Bar(widgets=[
            widget.GroupBox(**Theme.groupbox),
            widget.WindowName(**Theme.widget),

            widget.CPUGraph(graph_color='18BAEB', fill_color='1667EB.3', **Theme.graph),
            widget.MemoryGraph(graph_color='00FE81', fill_color='00B25B.3', **Theme.graph),
            widget.NetGraph(graph_color='ffff00', fill_color='4d4d00', interface='wlan0', **Theme.graph),

            widget.CurrentLayout(**Theme.widget),
            widget.Systray(**Theme.systray),
            widget.Sep(**Theme.sep),
            widget.Clock(fmt='%a %d %b %I:%M %p', **Theme.widget),
            ], **Theme.bar),
    ),
]


##-> Layouts
layouts = (
    layout.Tile(ratio=0.5),
    layout.Max(),
    )

##-> Floating windows
floating_layout = layout.floating.Floating(float_rules=[{'wmclass': x} for x in (
    #'audacious',
    'Download',
    'dropbox',
    'file_progress',
    'file-roller',
    'gimp',
    'Komodo_confirm_repl',
    'Komodo_find2',
    'pidgin',
    #'skype',
    'Update',  # Komodo update window
    'Xephyr',
    )])


@hook.subscribe.client_new
def floating_dialogs(window):
    dialog = window.window.get_wm_type() == 'dialog'
    transient = window.window.get_wm_transient_for()
    if dialog or transient:
        window.floating = True


##-> Run after Qtile init
#def main(qtile):
#    from grouper import AppGrouper, Match
#
#    ## Send apps to specified groups on window creation
#    AppGrouper(qtile, [{
#        'group': name,
#        'match': Match(**config['apps']),
#        } for name, config in group_setup if 'apps' in config])
